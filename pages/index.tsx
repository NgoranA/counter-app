import type { NextPage } from "next";
import Head from "next/head";
import { ToggleButton } from "primereact/togglebutton";
import { Button } from "primereact/button";
import { useAppSelector, useAppDispatch } from "../store/hooks/hooks";
import {
  increment,
  decrement,
  asyncMultiply,
} from "../features/counter/counter-slice";
import { switchMode, Theme } from "../features/counter/theme-slice";

import { useNameFetchQuery } from "../features/counter/getname-slice";
import { useState } from "react";

const Home: NextPage = () => {
  const count = useAppSelector((state) => state.counter.value);
  const mode = useAppSelector((state) => state.theme.mode);
  const check = useAppSelector((state) => state.theme.value);
  const dispatch = useAppDispatch();
  const [page, setPage] = useState("");
  const { data, isFetching, isSuccess } = useNameFetchQuery(page);

  const handleNameRequest = () => {
    setPage("hello");
  };

  const handleIncrement = () => {
    dispatch(increment());
  };
  const handleDecrement = () => {
    count === 0 ? count : dispatch(decrement());
  };

  const handleAsyncMultiply = () => {
    setTimeout(() => {
      dispatch(asyncMultiply(5));
    }, 2000);
  };

  const handleThemeSwitch = () => {
    if (mode === "dark") {
      dispatch(
        switchMode({
          mode: "light",
          value: true,
        })
      );
    } else {
      dispatch(
        switchMode({
          mode: "dark",
          value: false,
        })
      );
    }
  };
  return (
    <div>
      <Head>
        <title> Redux-Toolkit Counter App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-column gap-5 align-items-center justify-content-center">
        <h1 className="text-8xl text-primary "> {count} </h1>
        {page.length === 0 ? (
          <h1>{""}</h1>
        ) : isFetching ? (
          <h1>Loading...</h1>
        ) : (
          <h1> {data?.name} </h1>
        )}

        <div className="grid gap-4">
          <Button
            icon="pi pi-minus"
            iconPos="right"
            label="Decrement"
            onClick={handleDecrement}
          />
          <Button
            icon="pi pi-replay"
            iconPos="right"
            label="Multiply by 5 after 2 Seconds"
            onClick={handleAsyncMultiply}
          />
          <Button
            icon="pi pi-plus"
            iconPos="right"
            label="Increment"
            onClick={handleIncrement}
          />
        </div>
        <Button
          label={
            isSuccess ? "User Request Sucessfull" : "Request Name from api"
          }
          className="p-button-outlined"
          icon={
            page.length === 0
              ? "pi pi-user"
              : isFetching
              ? "pi pi-spin pi-spinner"
              : isSuccess
              ? "pi pi-check"
              : "pi pi-user"
          }
          iconPos="right"
          onClick={handleNameRequest}
        />
        <ToggleButton
          checked={check}
          onIcon="pi pi-moon"
          offIcon="pi pi-sun"
          iconPos="right"
          style={{
            backgroundColor: `${
              check ? "var(--surface-900)" : "var(--primary-color)"
            }`,
            color: `${check ? "var(--surface-a)" : "var()"}`,
          }}
          onLabel="Dark Mode"
          offLabel="Light mode"
          onChange={handleThemeSwitch}
        />
      </main>
    </div>
  );
};

export default Home;
